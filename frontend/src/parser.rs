use pest_derive::Parser;

use crate::ast::AstNode;
use pest::Parser;

#[derive(Parser)]
#[grammar = "src/parser.pest"]
pub struct BdlParser;

// The Rule enum is automatically generated by pest_derive

use crate::ast::Expr;
use crate::ast::Program;
use pest::iterators::Pair;

fn build_ast_from_expr(pair: Pair<Rule>) -> Option<AstNode> {
    match pair.as_rule() {
        Rule::program => {
            let nodes = pair
                .into_inner()
                .map(|pair| build_ast_from_expr(pair))
                .collect::<Option<Vec<Expr>>>()?;
            Some(AstNode::Program(Program { expressions: nodes }))
        }
        _ => None,
    }
}

fn parse_program(input: &str) -> Result<Box<AstNode>, String> {
    match BdlParser::parse(Rule::program, input) {
        Ok(parsed) => {
            for pair in parsed {
                let node = match build_ast_from_expr(pair) {
                    Some(n) => n,
                    None => return Err("Failed to build AST from expression".to_string()),
                };
                return Ok(node);
            }
        }
        Err(e) => {
            return Err(e.to_string());
        }
    }
    return Err("Failed to parse program".to_string());
}
